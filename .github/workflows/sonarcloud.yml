name: "SonarCloud Analysis"
on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

jobs:
  sonar-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detectar a Raiz do Projeto
        id: find-root
        shell: bash
        run: |
          PROJECT_DIR="."
          ALL_PROJECTS=$(find . -maxdepth 3 -name "settings.gradle" -o -name "settings.gradle.kts")
          if [ -n "$ALL_PROJECTS" ]; then
            PROJECT_DIR=$(dirname "$(echo "$ALL_PROJECTS" | head -n1)")
          fi
          echo "Projeto principal selecionado: $PROJECT_DIR"
          echo "PROJECT_PATH=$PROJECT_DIR" >> $GITHUB_ENV

      # Passo para determinar a versão do Java (lógica mantida)
      - name: Determine Java Version
        id: determine_java
        working-directory: ${{ env.PROJECT_PATH }}
        shell: bash
        run: |
          JAVA_VERSION='17'
          PROPERTIES_FILE="gradle/wrapper/gradle-wrapper.properties"
          if [ -f "$PROPERTIES_FILE" ]; then
            GRADLE_VERSION=$(grep -oP 'gradle-\K[0-9.]*(?=-)' "$PROPERTIES_FILE" || true)
            if [[ "$GRADLE_VERSION" == 4.* ]] || [[ "$GRADLE_VERSION" == 3.* ]] || [[ "$GRADLE_VERSION" == 2.* ]]; then
              JAVA_VERSION='8'
            fi
          fi
          echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ steps.determine_java.outputs.JAVA_VERSION }}
          distribution: 'temurin'

      # =============================================================================
      # PASSO 1: Compilar o projeto (SEM SONAR)
      # O objetivo é apenas gerar os arquivos .class. Usamos 'assembleDebug' para Android.
      # =============================================================================
      - name: Build project with Gradle
        working-directory: ${{ env.PROJECT_PATH }}
        shell: bash
        run: |
          set -e
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            echo "Compilando o projeto para gerar os binários..."
            # 'assembleDebug' é uma tarefa padrão do Android que compila o código sem rodar testes.
            ./gradlew assembleDebug
          else
            echo "ERRO: O arquivo ./gradlew não foi encontrado no projeto."
            exit 1
          fi

      # =============================================================================
      # PASSO 2: Analisar com Sonar Scanner CLI (INDEPENDENTE DO GRADLE)
      # Esta é a mudança de chave. Usamos a action oficial do Sonar para isso.
      # =============================================================================
      - name: Analyze with SonarCloud Scanner
        uses: SonarSource/sonar-scanner-run@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ${{ env.PROJECT_PATH }}
          args: >
            -Dsonar.projectKey=grilo-org_20250730T153312_bublitz_android-je
            -Dsonar.organization=grilo-org
            -Dsonar.sources=.
            -Dsonar.java.binaries=app/build/intermediates/javac/debug/classes
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ env.SONAR_TOKEN }}

